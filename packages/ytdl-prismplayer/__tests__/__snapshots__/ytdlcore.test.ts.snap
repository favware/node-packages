// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ytdl-core validation should export chooseFormat 1`] = `
"(formats, options) => {
  if (typeof options.format === 'object') {
    return options.format;
  }

  if (options.filter) {
    formats = exports.filterFormats(formats, options.filter);
    if (formats.length === 0) {
      return Error('No formats found with custom filter');
    }
  }

  let format;
  const quality = options.quality || 'highest';
  const getBitrate = (f) => {
    let s = f.bitrate.split('-');
    return parseFloat(s[s.length - 1], 10);
  };
  switch (quality) {
    case 'highest':
      format = formats[0];
      break;

    case 'lowest':
      format = formats[formats.length - 1];
      break;

    case 'highestaudio':
      formats = exports.filterFormats(formats, 'audio');
      format = null;
      for (let f of formats) {
        if (!format
          || f.audioBitrate > format.audioBitrate
          || (f.audioBitrate === format.audioBitrate && format.encoding && !f.encoding))
          format = f;
      }
      break;

    case 'lowestaudio':
      formats = exports.filterFormats(formats, 'audio')
      format = null;
      for (let f of formats) {
        if (!format
          || f.audioBitrate < format.audioBitrate
          || (f.audioBitrate === format.audioBitrate && format.encoding && !f.encoding))
          format = f;
      }
      break;

    case 'highestvideo':
      formats = exports.filterFormats(formats, 'video');
      format = null;
      for (let f of formats) {
        if (!format
          || getBitrate(f) > getBitrate(format)
          || (getBitrate(f) === getBitrate(format) && format.audioEncoding && !f.audioEncoding))
          format = f;
      }
      break;

    case 'lowestvideo':
      formats = exports.filterFormats(formats, 'video')
      format = null;
      for (let f of formats) {
        if (!format
          || getBitrate(f) < getBitrate(format)
          || (getBitrate(f) === getBitrate(format) && format.audioEncoding && !f.audioEncoding))
          format = f;
      }
      break;

    default: {
      let getFormat = (itag) => {
        return formats.find((format) => format.itag === '' + itag);
      };
      if (Array.isArray(quality)) {
        quality.find((q) => format = getFormat(q));
      } else {
        format = getFormat(quality);
      }
    }

  }

  if (!format) {
    return Error('No such format found: ' + quality);
  }
  return format;
}"
`;

exports[`ytdl-core validation should export downloadFromInfo 1`] = `
"(info, options) => {
  const stream = createStream(options);
  if (!info.full) {
    throw new Error('Cannot use \`ytdl.downloadFromInfo()\` when called ' +
      'with info from \`ytdl.getBasicInfo()\`');
  }
  setImmediate(() => {
    downloadFromInfoCallback(stream, info, options);
  });
  return stream;
}"
`;

exports[`ytdl-core validation should export filterFormats 1`] = `
"(formats, filter) => {
  let fn;
  switch (filter) {
    case 'audioandvideo':
      fn = (format) => format.bitrate && format.audioBitrate;
      break;

    case 'video':
      fn = (format) => format.bitrate;
      break;

    case 'videoonly':
      fn = (format) => format.bitrate && !format.audioBitrate;
      break;

    case 'audio':
      fn = (format) => format.audioBitrate;
      break;

    case 'audioonly':
      fn = (format) => !format.bitrate && format.audioBitrate;
      break;

    default:
      if (typeof filter === 'function') {
        fn = filter;
      } else {
        throw TypeError(\`Given filter (\${filter}) is not supported\`);
      }
  }
  return formats.filter(fn);
}"
`;

exports[`ytdl-core validation should export getBasicInfo 1`] = `
"(link, options, callback) => {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    } else if (!options) {
      options = {};
    }

    if (!callback) {
      return new Promise((resolve, reject) => {
        exports[fnName](link, options, (err, info) => {
          if (err) return reject(err);
          resolve(info);
        });
      });
    }

    const id = util.getVideoID(link);
    if (id instanceof Error) return callback(id);

    const key = [fnName, id, options.lang].join('-');
    if (exports.cache.has(key)) {
      callback(null, exports.cache.get(key));
    } else {
      fn(id, options, (err, info) => {
        if (err) return callback(err);
        exports.cache.set(key, info);
        setTimeout(() => { exports.cache.delete(key); }, exports.cache.timeout);
        callback(null, info);
      });
    }
  }"
`;

exports[`ytdl-core validation should export getInfo 1`] = `
"(link, options, callback) => {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    } else if (!options) {
      options = {};
    }

    if (!callback) {
      return new Promise((resolve, reject) => {
        exports[fnName](link, options, (err, info) => {
          if (err) return reject(err);
          resolve(info);
        });
      });
    }

    const id = util.getVideoID(link);
    if (id instanceof Error) return callback(id);

    const key = [fnName, id, options.lang].join('-');
    if (exports.cache.has(key)) {
      callback(null, exports.cache.get(key));
    } else {
      fn(id, options, (err, info) => {
        if (err) return callback(err);
        exports.cache.set(key, info);
        setTimeout(() => { exports.cache.delete(key); }, exports.cache.timeout);
        callback(null, info);
      });
    }
  }"
`;

exports[`ytdl-core validation should export getURLVideoID 1`] = `
"(link) => {
  const parsed = url.parse(link, true);
  let id = parsed.query.v;
  if (validPathDomains.has(parsed.hostname) && !id) {
    const paths = parsed.pathname.split('/');
    id = paths[paths.length - 1];
  } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {
    return Error('Not a YouTube domain');
  }
  if (!id) {
    return Error('No video id found: ' + link);
  }
  id = id.substring(0, 11);
  if (!exports.validateID(id)) {
    return TypeError(\`Video id (\${id}) does not match expected \` +
      \`format (\${idRegex.toString()})\`);
  }
  return id;
}"
`;

exports[`ytdl-core validation should export getVideoID 1`] = `
"(str) => {
  if (exports.validateID(str)) {
    return str;
  } else {
    return exports.getURLVideoID(str);
  }
}"
`;

exports[`ytdl-core validation should export validateID 1`] = `
"(id) => {
  return idRegex.test(id);
}"
`;

exports[`ytdl-core validation should export validateURL 1`] = `
"(string) => {
  return !(exports.getURLVideoID(string) instanceof Error);
}"
`;
